<?php
if ( !class_exists('LDAP_HOST'))
	require_once 'class.ldap_host.php';

class LDAP{
	
	protected $host = FALSE; 
	protected $connection; 
	protected $groups 	= array();
	protected $admin_groups = array();
	protected $bind = FALSE;
	
	public 	  $error = array();
	
	function LDAP(){
		 if (!function_exists('ldap_connect')) {
		 	$this->set_error("No LDAP Support on server.", LOG_PRC_DOWN, 3 );
            throw new Exception("No LDAP Support on server.");
			die(); 
        } 
		 
	//	$this->groups = array( LDAP_GROUP_EMPLEADOS, LDAP_GROUP_BECARIOS, LDAP_GROUP_CATERING, LDAP_GROUP_COMUNICACION, LDAP_GROUP_GENERAL, LDAP_GROUP_PROPERTY, LDAP_GROUP_EXTERNOS);
	//	$this->admin_groups = array( LDAP_GROUP_CATERING, LDAP_GROUP_COMUNICACION, LDAP_GROUP_GENERAL, LDAP_GROUP_PROPERTY, LDAP_GROUP_EXTERNOS );
		
		$this->connect(); 
	} 
	
	protected function connect(){ 
		try {
			$host = new LDAP_HOST();
			$this->connection = ldap_connect( $host->host , $host->port);
			if ( $this->connection ){
				ldap_set_option($this->connection, LDAP_OPT_PROTOCOL_VERSION,  3);
				ldap_set_option($this->connection, LDAP_OPT_REFERRALS, 		 0);
				ldap_set_option($this->connection, LDAP_OPT_NETWORK_TIMEOUT,  10);
				ldap_set_option($this->connection, LDAP_OPT_TIMELIMIT, 		20); 

				$this->host = $host; 
				$this->bind = $this->bind($this->host->user, $this->host->pwd);
				return TRUE;
			} else {
				$this->set_error("LDAP Server " . $server . " unreacheble.", LOG_PRC_DOWN, 3 );
				return FALSE; 
			} 
		} catch (Exception $e){
		 	$this->set_error("Could not stablish a connection with the LDAP Server " . $server . ".", LOG_PRC_DOWN, 3 ); 
			return FALSE;
		}
	}

	protected function bind( $user , $pwd ){
		//echo ">" . $user . ">>" . $pwd;  
		return ldap_bind($this->connection, $user , $pwd); 
	} 
	 
	
	public function get_user_info( $user ){
		
		$filter	="(|(samaccountname=" . $user . ")(mail=".$user."*))";  
		$result = array();
		try {  
			if ($this->bind(  $this->host->user, $this->host->pwd ) ){
				$sr	= ldap_search( $this->connection,  $this->host->baseDN, $filter);
				$result = ldap_get_entries($this->connection, $sr);
				$this->unbind();
				
				if ( $result && count($result) > 1 ){ 
					$response = $result[0]; 
					$info = $this->format_user_info($response); 
					return $info; 
				 } 
				 else return FALSE; 
			} else {
				$this->set_error( "LDAP Error: Unable to bind to LDAP Server." , LOG_INFO_ERR, 1 ); 
				return FALSE;
			}
		} catch (Exception $e ){
			$this->set_error( "LDAP Error: " . $e, LOG_INFO_ERR, 1 ); 
			return FALSE;
		} 
	}

	public function get_ldap_group( $group ){
		if ( $group != '' ){
			switch ( $group ) {
				case 'PROSA':
					$dn = "cn=Administrador,ou=APP_MNO,ou=Aplicaciones,o=prosa.com.mx,o=isp";
					break;
				case 'Client_admin':
					$dn = "";
					break;
				case 'Client':
                                        $dn = "";
                                        break;
				default:
					$this->set_error( "Invalid Group", ERR_VAL_INVALID );
					return FALSE;
					break;
			}

			$filter = "(uniqueMember=*)";

			$result = array();
        	        try {
                        	if ($this->bind( $this->host->user, $this->host->pwd ) ){
                                	$sr       = ldap_search( $this->connection,  $dn, $filter);
              		                $result[] = ldap_get_entries($this->connection, $sr);
                        	        $this->unbind( );
                       		}
                        	return $result;

	                } catch (Exception $e ){
        	                $this->set_error( "LDAP Error: " . $e, LOG_INFO_ERR, 1 );
                	        return FALSE;
                	}

		} else {
			$this->set_error( "Invalid Group", ERR_VAL_INVALID  );
			return FALSE;
		}
	}

	public function get_user_info_all( $user ){ 
		$filter	="(|(samaccountname=" . $user . ")(mail=".$user."*))";  
		$result = array();
		try { 
			if ($this->bind( $this->host->user, $this->host->pwd ) ){
				$sr		= ldap_search( $this->connection,  $this->host->baseDN, $filter);
				$result[] = ldap_get_entries($this->connection, $sr);
				$this->unbind( );
			}   
			return $result;
			 
		} catch (Exception $e ){
			$this->set_error( "LDAP Error: " . $e, LOG_INFO_ERR, 1 );
			return FALSE;
		} 
	}
	
	public function login( $user, $pwd ){
		try {
			$uid = $this->is_member( $user );
			$this->set_msg(" >>> UID = $uid  <<<< ");

			if ( $uid ){  
				$success = $this->bind( $uid, $pwd ); 				
				$this->set_msg(" >>> bind: " . ( $success ? "TRUE" : "FALSE" ) . "  <<<< ");

				if ($success) { 
					return TRUE;
				} else {
					$this->set_error("Invalid User (" . $user . ") / Password.", LOG_SESS_ERR, 2 );
					return FALSE;
				} 
			}  else {
				$this->set_error("Invalid User (" . $user . ").", LOG_SESS_ERR, 2 );
				return FALSE;
			}
		}  catch (Exception $e){
			$this->set_error("An error occured when trying to login to LDAP with User: " . $user . ". " . $e, LOG_SESS_ERR, 2 );
			return FALSE;
		}
	}
	
	
	private function is_member( $user ){
		try { 
			$members = $this->get_unique_members();
			if ( $members ){
				$this->set_msg( print_r($members ,TRUE) );
				foreach ($members as $k => $uid) {
				//	if ( $k != 'count' ){
						if ( strpos($uid, "uid=" . $user .",") !== FALSE ){
							return $uid;
						}
				//	}
				}
				return FALSE;
			} else {
				$this->set_error(" LDAP Error while querying for members. " . $e, LOG_SESS_ERR, 2 );
				return FALSE;
			}
			
		} catch (Exception $e){
			$this->set_error(" LDAP Error validating user membership. " . $e, LOG_SESS_ERR, 2 );
			return FALSE;
		}
	} 
	
	public function get_unique_members(){
		$filter = "(uniquemember=*)";  
		$attr 	= array();
		$result = array(); 
		
		try {
			if ( !$this->bind ){
				$this->connect(); 
				$this->bind	= $this->bind( $this->host->user, $this->host->pwd );
			}
			if ( $this->bind ){
				$sr		= ldap_search($this->connection, "ou=APP_MNO,ou=Aplicaciones,o=prosa.com.mx,o=isp", $filter );
				$result 	= ldap_get_entries($this->connection, $sr);
				 
			} else { 
				$this->set_error(" Could not bind to server. ", LOG_PRC_DOWN ,2);
				return FALSE;
			}

		} catch (Exception $e ){
			$this->set_error(" Could not search in LDAP. ", LOG_PRC_DOWN ,2);
			return FALSE;
		}
		if ( $result && count( $result ) > 0 ){
			$members = $result[0]['uniquemember']; 
			return is_array($members) ? $members : FALSE;
		} else {
			return FALSE;
		} 
		 
		return $result;		
	} 
	
	public function format_user_info( $info ){
		$user = new stdClass;
		$user->user 		=  $info['samaccountname'][0]; 
		$user->displayname	=  $info['displayname'][0];
		$user->name			=  $info['displayname'][0];
		$user->email 		=  isset($info['mail']) ? $info['mail'][0] : '';
		$user->memberof		=  isset( $info['memberof'] ) ? $this->clean_memberof( $info['memberof'] ) : "";
		//$user->memberof	=  $info['memberof'] ;
		
		$user->dn			= $info['dn']; 
		$user->profile		= $this->set_profile($info['dn'], $info['memberof']);
		
		return $user;
	}
	
	protected function set_profile( $dn, $groups ){
		
		if ( strpos( $dn , 'Cliente' ) > 0 ){ //cliente
		
			foreach ($groups as $k => $gr) {
				
				if ( strpos($gr, 'ABW' ) > 0 && strpos( $gr, 'Administrador' ) ){
					return 2;
				}
				
				if ( strpos($gr, 'ABW' ) > 0 && strpos( $gr, 'Operador' ) ){
					return 3;
				}
				
			} 
			return 3;
		
		} else if ( strpos( $dn , 'GenteProsa') > 0 ){
			return 1;
		} else {
			return FALSE;
		}
	}
	
	protected function clean_memberof( $array ){
		$resp = ""; 
		for ( $i = 0; $i<$array['count']; $i++ ){
			$str = $array[$i]; 
			$arr_str = explode(",", $str);
			$grp = str_replace( 'OU=', '',  $arr_str[1] );
			//if ( in_array($grp, $this->groups))
				$resp .= $grp . "#";
		} 
		return $resp;
	}

	public function search( $field = "samaccountname", $niddle = ''){
		
		//$filter_name ="(|(sn=$niddle*)(givenname=$niddle*)(mail=$niddle*)(samaccountname=$niddle*))";
		
		$filter_name = "(" . $field . "=" . $niddle . "*)"; 
		$filter = "(&(objectClass=user)(objectCategory=person)" . $filter_name . ")";
		$attr 	= array("samaccountname", "givenname", "title", "mail", "displayname", "mobile", "telephonenumber", "memberof");
		$result = array(); 
		
		try {
			if ( !$this->bind ){
				$this->connect(); 
				$this->bind	= $this->bind( $this->host->user, $this->host->pwd );
			}
			if ( $this->bind ){
				$sr			= ldap_search($this->connection, $this->host->branch, $filter, $attr);
				$result 	= ldap_get_entries($this->connection, $sr);
				 
			} else { 
				$this->set_error(" Could not bind to server. ", LOG_PRC_DOWN ,2);
				return FALSE;
			}
		} catch (Exception $e ){
			$this->set_error(" Could not search in LDAP. ", LOG_PRC_DOWN ,2);
			return FALSE;
		}
		
		$response = array();
		foreach ( $result as $key => $inf ){
			if ( is_numeric($key) 
					&& isset( $inf['mail'] ) 
					&& $inf['mail'][0] != '' 
			){
				$user = $this->format_user_info( $inf ); 
				if ( $user->memberof != ''){
					$response[] = $user;
				}
			}
		}
		 
		return $response;
	}
	
	public function search_test( $code ){
		
		try {
			if ( !$this->bind ){
				$this->connect(); 
				$this->bind	= $this->bind( $this->host->user, $this->host->pwd );
			} 
			if ( $this->bind ){
				
				$filter_name = ""; 
				$filter = "(&(objectClass=user)(objectCategory=person)" . $filter_name . ")";
				$attr 	= array("samaccountname", "givenname", "title", "mail", "displayname", "mobile", "telephonenumber", "memberof");
				$result = array(); 
				
				$branch = "OU=" . $code . ",OU=Nacional,OU=prosa.com.mx" . "," . $this->host->branch  ;
				
				$branch = "OU=Nacional,OU=prosa.com.mx," . $this->host->branch;
				
				$branch = "OU=prosa.com.mx,DC=sellcom-solutions,DC=com,DC=mx"; 
				$sr	= ldap_search($this->connection, $branch, $filter, $attr); 
				if ( $sr ){
					$result = ldap_get_entries($this->connection, $sr);
				} 
			} else { 
				$this->set_error(" Could not bind to server. ", LOG_PRC_DOWN ,2);
				return FALSE;
			}
		} catch (Exception $e ){
			$this->set_error(" Could not search in LDAP. ", LOG_PRC_DOWN ,2);
			return FALSE;
		}
		
		$response = array();
		foreach ( $result as $key => $inf ){
			if ( is_numeric($key) 
					//&& isset( $inf['mail'] ) 
					//&& $inf['mail'][0] != '' 
			){
				$user = $this->format_user_info( $inf ); 
				if ( $user->memberof != ''){
					$response[] = $user;
				}
			}
		}
		 
		return $response;
		
	}
	
	public function search_branch( $branch = "" ){
		
		//$filter_name ="(|(sn=$niddle*)(givenname=$niddle*)(mail=$niddle*)(samaccountname=$niddle*))";
		//$dn = $this->host->branch  ;
		
		try {
			
			$filter_name = ""; 
			$filter = "(&(objectClass=user)(objectCategory=person)" . $filter_name . ")";
			$attr 	= array("samaccountname", "givenname", "title", "mail", "displayname", "mobile", "telephonenumber", "memberof");
			$result = array(); 
			
			$dn = $branch . "," . $this->host->branch  ;
			
			if ( !$this->bind ){
				$this->connect(); 
				$this->bind	= $this->bind( $this->host->user, $this->host->pwd );
			}
			if ( $this->bind ){ 
				$sr	= ldap_search($this->connection, $dn, $filter, $attr); 
				if ( $sr ){
					$result = ldap_get_entries($this->connection, $sr);
				}  
			} else { 
				$this->set_error(" Could not bind to server. ", LOG_PRC_DOWN ,2);
				return FALSE;
			}
		} catch (Exception $e ){
			$this->set_error(" Could not search in LDAP. ", LOG_PRC_DOWN ,2);
			return FALSE;
		}
		
		$response = array();
		foreach ( $result as $key => $inf ){
			if ( is_numeric($key) 
					//&& isset( $inf['mail'] ) 
					//&& $inf['mail'][0] != '' 
			){
				$user = $this->format_user_info( $inf ); 
				if ( $user->memberof != ''){
					$response[] = $user;
				}
			}
		}
		 
		return $response;
	}
	
	public function get_group_members( $group ){  
		$filter_name = "(memberOf=" . $group .")";
		
		$filter = "(&(objectClass=user)(objectCategory=person)" . $filter_name . ")";
		$attr 	= array("samaccountname", "givenname", "title", "mail", "displayname", "memberof", "manager");
		$result	 = array(); 
		
		try {   
			$sr			= ldap_search($this->connection, $this->host->branch, $filter, $attr);
			$result 	= ldap_get_entries($this->connection, $sr); 
		} catch (Exception $e ){
			$this->set_error(" Could not search in LDAP. ", LOG_PRC_DOWN ,2);
			return FALSE;
		} 
		return $result; 
	} 
 
	protected function unbind(){ 
		return ldap_unbind( $this->connection );  
	}
	
	protected function set_error( $err, $type, $lvl = 1 ){
		global $Log;
		$this->error[] = $err;
		$Log->write_log(  " ERROR @ Class LDAP: " . $err , $type, $lvl);
	} 
	
	protected function set_msg( $msg , $echo = '' ){
		global $Log;
		global $mensaje;
		$Log->write_log( " MSG @ Class LDAP: " . $msg );
		if ( $echo != '') $mensaje .= $echo . " <br/> ";
	}
}
?>
